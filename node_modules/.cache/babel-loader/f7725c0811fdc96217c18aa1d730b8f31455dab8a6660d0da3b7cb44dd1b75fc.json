{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n\n// const CommentList = () => {\n//   const [comments, setComments] = useState<PostComment[]>([]);\n//   const [newComment, setNewComment] = useState<PostComment>({\n//     id: 0,\n//     thread: 0,\n//     content: '',\n//     creator: {\n//       id: 0,\n//       name: '',\n//       userName: '',\n//     },\n//   });\n\n//   useEffect(() => {\n//     const savedComments = JSON.parse(localStorage.getItem('comments') || '[]');\n//     setComments(savedComments);\n//   }, []);\n\n//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n//     const { name, value } = e.target;\n//     setNewComment({\n//       ...newComment,\n//       [name]: value,\n//       creator: {\n//         ...newComment.creator,\n//         [name]: value,\n//       },\n//     });\n//   };\n\n//   const handleSubmit = (e: React.FormEvent) => {\n//     e.preventDefault(); // Prevent the default form submission behavior\n\n//     if (newComment.content && newComment.creator.name && newComment.creator.userName) {\n//       const newCommentData: PostComment = { ...newComment, id: Date.now() };\n//       const updatedComments = [...comments, newCommentData];\n\n//       // Save the updated posts to localStorage\n//       localStorage.setItem('comments', JSON.stringify(updatedComments));\n\n//       setComments(updatedComments);\n\n//       // Clear the input fields by resetting newPost\n//       setNewComment({\n//         id: 0,\n//         thread: 0,\n//         content: '',\n//         creator: {\n//           id: 0,\n//           name: '',\n//           userName: '',\n//         },\n//       });\n//     }\n//   };\n\n//   return (\n//     <div>\n//     <div className='comment' id='comment-field'>\n//       <h3>Comments</h3>\n//     <form onSubmit={handleSubmit}>\n//       <label htmlFor=\"name\">Name</label>\n//       <input className=\"commentInput\" type=\"name\" name=\"name\" id=\"name\" value={newComment.creator.name} onChange={handleInputChange}/>\n//       <label htmlFor=\"userName\">Username</label>\n//       <input className=\"commentInput\" type=\"userName\" name=\"userName\" id=\"userName\" value={newComment.creator.userName} onChange={handleInputChange}/>\n//       <label htmlFor=\"comment\" id='comment-label'>Comment</label>\n//       <input className=\"commentInput\" type=\"content\" title=\"content \"name=\"content\" id=\"content\" value={newComment.content} onChange={handleInputChange}/>\n//       <button className='commentButton' id='commentButton'>Send comment</button>\n//     </form>\n//     </div>\n//     {comments.map(function(comment){\n//             console.log(\"comments\", comment.creator)\n//     return (<div key={comment.id} className=\"comment\" id=\"comment\">\n//                 <p>Description: {comment.content}</p>\n//                 <p>Creator name: {comment.creator.name}</p>\n//                 <p>Username: {comment.creator.userName}</p>\n//               </div>)})}\n\n//     </div>\n//   )\n// }\n\n// export default CommentList","map":{"version":3,"names":[],"sources":["C:/Users/User/Desktop/Typescript individuell/Typescript-individuell/src/components/CommentList.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const CommentList = () => {\r\n//   const [comments, setComments] = useState<PostComment[]>([]);\r\n//   const [newComment, setNewComment] = useState<PostComment>({\r\n//     id: 0,\r\n//     thread: 0,\r\n//     content: '',\r\n//     creator: {\r\n//       id: 0,\r\n//       name: '',\r\n//       userName: '',\r\n//     },\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const savedComments = JSON.parse(localStorage.getItem('comments') || '[]');\r\n//     setComments(savedComments);\r\n//   }, []);\r\n\r\n//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n//     const { name, value } = e.target;\r\n//     setNewComment({\r\n//       ...newComment,\r\n//       [name]: value,\r\n//       creator: {\r\n//         ...newComment.creator,\r\n//         [name]: value,\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   const handleSubmit = (e: React.FormEvent) => {\r\n//     e.preventDefault(); // Prevent the default form submission behavior\r\n  \r\n//     if (newComment.content && newComment.creator.name && newComment.creator.userName) {\r\n//       const newCommentData: PostComment = { ...newComment, id: Date.now() };\r\n//       const updatedComments = [...comments, newCommentData];\r\n  \r\n//       // Save the updated posts to localStorage\r\n//       localStorage.setItem('comments', JSON.stringify(updatedComments));\r\n  \r\n//       setComments(updatedComments);\r\n  \r\n//       // Clear the input fields by resetting newPost\r\n//       setNewComment({\r\n//         id: 0,\r\n//         thread: 0,\r\n//         content: '',\r\n//         creator: {\r\n//           id: 0,\r\n//           name: '',\r\n//           userName: '',\r\n//         },\r\n//       });\r\n//     }\r\n//   };\r\n  \r\n//   return (\r\n//     <div>\r\n//     <div className='comment' id='comment-field'>\r\n//       <h3>Comments</h3>\r\n//     <form onSubmit={handleSubmit}>\r\n//       <label htmlFor=\"name\">Name</label>\r\n//       <input className=\"commentInput\" type=\"name\" name=\"name\" id=\"name\" value={newComment.creator.name} onChange={handleInputChange}/>\r\n//       <label htmlFor=\"userName\">Username</label>\r\n//       <input className=\"commentInput\" type=\"userName\" name=\"userName\" id=\"userName\" value={newComment.creator.userName} onChange={handleInputChange}/>\r\n//       <label htmlFor=\"comment\" id='comment-label'>Comment</label>\r\n//       <input className=\"commentInput\" type=\"content\" title=\"content \"name=\"content\" id=\"content\" value={newComment.content} onChange={handleInputChange}/>\r\n//       <button className='commentButton' id='commentButton'>Send comment</button>\r\n//     </form>\r\n//     </div>\r\n//     {comments.map(function(comment){\r\n//             console.log(\"comments\", comment.creator)\r\n//     return (<div key={comment.id} className=\"comment\" id=\"comment\">\r\n//                 <p>Description: {comment.content}</p>\r\n//                 <p>Creator name: {comment.creator.name}</p>\r\n//                 <p>Username: {comment.creator.userName}</p>\r\n//               </div>)})}\r\n\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default CommentList\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}